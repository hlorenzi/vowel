import { forwardLinearPrediction, praatBurgMethod } from "./lpc.ts"
import { praatFixRootToUnitCircle, praatGaussianWindow, praatLpcToPolynomial, praatPreemphasis, rootsToFormants } from "./formantExtractor.ts"
import { findRootsOfPolynomial, Complex } from "./roots.ts"


const data = [
    0.000000,
    0.000000,
    0.000000,
    -0.000000,
    0.000000,
    -0.000000,
    -0.000001,
    -0.000000,
    0.000000,
    0.000001,
    0.000001,
    0.000001,
    -0.000000,
    -0.000001,
    -0.000001,
    -0.000001,
    -0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000001,
    0.000001,
    0.000001,
    -0.000000,
    -0.000002,
    -0.000002,
    -0.000002,
    -0.000001,
    0.000002,
    0.000004,
    0.000004,
    0.000003,
    -0.000000,
    -0.000003,
    -0.000005,
    -0.000004,
    -0.000002,
    0.000001,
    0.000004,
    0.000005,
    0.000003,
    0.000001,
    -0.000001,
    -0.000003,
    -0.000003,
    -0.000003,
    -0.000002,
    -0.000001,
    0.000001,
    0.000002,
    0.000004,
    0.000005,
    0.000005,
    0.000001,
    -0.000003,
    -0.000007,
    -0.000008,
    -0.000006,
    -0.000000,
    0.000005,
    0.000011,
    0.000010,
    0.000007,
    -0.000001,
    -0.000005,
    -0.000011,
    -0.000008,
    -0.000006,
    0.000003,
    0.000005,
    0.000012,
    0.000006,
    0.000010,
    -0.000001,
    0.000002,
    -0.000011,
    -0.000002,
    -0.000013,
    0.000004,
    -0.000007,
    0.000017,
    0.000001,
    0.000027,
    -0.000005,
    0.000022,
    -0.000026,
    0.000016,
    -0.000043,
    0.000032,
    -0.000047,
    0.000073,
    -0.000065,
    0.000132,
    -0.000160,
    0.000293,
    -0.003321,
    -0.005079,
    -0.000271,
    0.003460,
    0.005808,
    0.004702,
    0.002030,
    -0.001402,
    -0.003154,
    -0.003376,
    -0.001871,
    -0.000428,
    0.000695,
    0.000682,
    0.000614,
    0.000507,
    0.001163,
    0.001616,
    0.001744,
    0.000553,
    -0.001139,
    -0.002977,
    -0.003386,
    -0.002406,
    0.000143,
    0.002556,
    0.004116,
    0.003532,
    0.001596,
    -0.001232,
    -0.003086,
    -0.003666,
    -0.002369,
    -0.000483,
    0.001581,
    0.002415,
    0.002409,
    0.001297,
    0.000254,
    -0.000814,
    -0.001095,
    -0.001255,
    -0.000872,
    -0.000685,
    -0.000125,
    0.000248,
    0.000936,
    0.001202,
    0.001383,
    0.000775,
    0.000057,
    -0.000995,
    -0.001420,
    -0.001487,
    -0.000669,
    0.000184,
    0.001181,
    0.001449,
    0.001332,
    0.000489,
    -0.000218,
    -0.000930,
    -0.000972,
    -0.000818,
    -0.000195,
    0.000239,
    0.000677,
    0.000681,
    0.000629,
    0.000309,
    0.000090,
    -0.000225,
    -0.000329,
    -0.000381,
    -0.000284,
    -0.000079,
    0.000121,
    0.000391,
    0.000436,
    0.000495,
    0.000200,
    0.000117,
    -0.000302,
    -0.000158,
    -0.000423,
    0.000100,
    -0.000138,
    0.000561,
    0.000013,
    0.000638,
    0.000127,
    -0.004668,
    -0.072371,
    -0.052466,
    0.015177,
    0.055771,
    0.067039,
    0.042813,
    0.008742,
    -0.021165,
    -0.030607,
    -0.025295,
    -0.010580,
    0.000130,
    0.005529,
    0.004165,
    0.003394,
    0.003745,
    0.007363,
    0.008728,
    0.007095,
    0.000035,
    -0.007453,
    -0.012974,
    -0.011777,
    -0.005824,
    0.003347,
    0.009741,
    0.011875,
    0.007960,
    0.001754,
    -0.004767,
    -0.007531,
    -0.007097,
    -0.003362,
    0.000382,
    0.003488,
    0.003946,
    0.003248,
    0.001234,
    -0.000104,
    -0.001284,
    -0.001288,
    -0.001335,
    -0.000750,
    -0.000571,
    0.000071,
    0.000327,
    0.000907,
    0.000902,
    0.000932,
    0.000301,
    -0.000121,
    -0.000752,
    -0.000755,
    -0.000705,
    -0.000128,
    0.000185,
    0.000615,
    0.000524,
    0.000454,
    0.000032,
    -0.000108,
    -0.000353,
    -0.000223,
    -0.000216,
    0.000038,
    0.000049,
    0.000202,
    0.000096,
    0.000147,
    -0.000001,
    0.000040,
    -0.000088,
    -0.000011,
    -0.000094,
    0.000013,
    -0.000044,
    0.000067,
    0.000004,
    0.000091,
    -0.000004,
    0.000060,
    -0.000048,
    0.000025,
    -0.000068,
    0.000034,
    -0.000055,
    0.000069,
    -0.000050,
    0.000103,
    -0.000104,
    0.000214,
    -0.001112,
    -0.003375,
    -0.001062,
    0.001113,
    0.002236,
    0.001966,
    0.000989,
    -0.000098,
    -0.000693,
    -0.000772,
    -0.000476,
    -0.000149,
    0.000063,
    0.000100,
    0.000074,
    0.000050,
    0.000081,
    0.000119,
    0.000126,
    0.000065,
    -0.000029,
    -0.000116,
    -0.000143,
    -0.000107,
    -0.000026,
    0.000052,
    0.000095,
    0.000087,
    0.000046,
    -0.000005,
    -0.000039,
    -0.000048,
    -0.000034,
    -0.000012,
    0.000009,
    0.000018,
    0.000017,
    0.000011,
    0.000003,
    -0.000002,
    -0.000004,
    -0.000004,
    -0.000003,
    -0.000002,
    -0.000001,
    0.000000,
    0.000001,
    0.000002,
    0.000002,
    0.000001,
    0.000000,
    -0.000001,
    -0.000001,
    -0.000001,
    -0.000001,
    -0.000000,
    0.000000,
    0.000001,
    0.000001,
    0.000000,
    -0.000000,
    -0.000000,
    -0.000000,
    -0.000000,
    -0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    -0.000000,
    -0.000000,
    -0.000000,
    -0.000000,
    -0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    -0.000000,
    -0.000000,
    -0.000000,
    -0.000000,
    -0.000000,
    0.000000,
    0.000000,
    0.000000
]


const data2 = [
    0.001366,
    0.003476,
    0.001267,
    0.005753,
    -0.019464,
    -0.100137,
    -0.124634,
    -0.090486,
    -0.022001,
    0.040711,
    0.073084,
    0.067449,
    0.038528,
    0.005065,
    -0.016519,
    -0.023300,
    -0.019323,
    -0.013170,
    -0.008315,
    -0.004817,
    0.001071,
    0.010109,
    0.020205,
    0.025492,
    0.021955,
    0.009186,
    -0.007365,
    -0.020336,
    -0.023219,
    -0.014987,
    0.000384,
    0.015369,
    0.023504,
    0.021837,
    0.012423,
    0.000365,
    -0.008795,
    -0.011887,
    -0.008869,
    -0.002311,
    0.004357,
    0.008717,
    0.009838,
    0.008444,
    0.005685,
    0.002876,
    0.000508,
    -0.000969,
    -0.001705,
    -0.001319,
    -0.000049,
    0.002175,
    0.004454,
    0.006250,
    0.006491,
    0.005347,
    0.002910,
    0.000557,
    -0.001123,
    -0.001103,
    0.000064,
    0.002254,
    0.004032,
    0.005181,
    0.004869,
    0.003950,
    0.002352,
    0.001337,
    0.000578,
    0.000907,
    0.001329,
    0.002359,
    0.002823,
    0.003482,
    0.003303,
    0.003348,
    0.002614,
    0.002446,
    0.001687,
    0.001827,
    0.001457,
    0.002138,
    0.002106,
    0.003017,
    0.002750,
    0.003370,
    0.002499,
    0.002872,
    0.001687,
    0.002412,
    0.001288,
    0.002784,
    0.001420,
    0.003824,
    0.000938,
    0.005702,
    -0.045451,
    -0.117520,
    -0.117889,
    -0.070282,
    0.001761,
    0.055200,
    0.075442,
    0.059100,
    0.027213,
    -0.004143,
    -0.020077,
    -0.022989,
    -0.016994,
    -0.011539,
    -0.006962,
    -0.003428,
    0.003941,
    0.013440,
    0.022930,
    0.025265,
    0.018703,
    0.003593,
    -0.012335,
    -0.022730,
    -0.021480,
    -0.010446,
    0.005920,
    0.018963,
    0.024149,
    0.019233,
    0.008513,
    -0.003341,
    -0.010459,
    -0.011580,
    -0.006799,
    -0.000053,
    0.006248,
    0.009341,
    0.009696,
    0.007509,
    0.004810,
    0.001919,
    0.000011,
    -0.001400,
    -0.001610,
    -0.001086,
    0.000702,
    0.002874,
    0.005243,
    0.006432,
    0.006347,
    0.004544,
    0.002155,
    -0.000213,
    -0.001220,
    -0.000914,
    0.000818,
    0.002842,
    0.004605,
    0.005139,
    0.004704,
    0.003362,
    0.002025,
    0.000942,
    0.000676,
    0.000947,
    0.001728,
    0.002479,
    0.003137,
    0.003402,
    0.003408,
    0.003061,
    0.002613,
    0.002125,
    0.001759,
    0.001626,
    0.001708,
    0.002069,
    0.002465,
    0.002906,
    0.003029,
    0.003063,
    0.002670,
    0.002435,
    0.001940,
    0.001986,
    0.001792,
    0.002303,
    0.002251,
    0.002826,
    0.002874,
    -0.001885,
    -0.074512,
    -0.125252,
    -0.106388,
    -0.046794,
    0.022890,
    0.066151,
    0.073310,
    0.049252,
    0.015814,
    -0.011343,
    -0.022299,
    -0.021530,
    -0.014912,
    -0.009912,
    -0.005857,
    -0.001472,
    0.006977,
    0.016886,
    0.024747,
    0.024091,
    0.014377,
    -0.002023,
    -0.016741,
    -0.023709,
    -0.018685,
    -0.005228,
    0.011006,
    0.021705,
    0.023573,
    0.016019,
    0.004430,
    -0.006444,
    -0.011480,
    -0.010549,
    -0.004557,
    0.002189,
    0.007724,
    0.009692,
    0.009229,
    0.006559,
    0.003882,
    0.001110,
    -0.000464,
    -0.001665,
    -0.001463,
    -0.000679,
    0.001471,
    0.003625,
    0.005872,
    0.006493,
    0.005982,
    0.003695,
    0.001381,
    -0.000804,
    -0.001187,
    -0.000543,
    0.001586,
    0.003418,
    0.005020,
    0.005002,
    0.004421,
    0.002790,
    0.001715,
    0.000654,
    0.000824,
    0.001055,
    0.002113,
    0.002595,
    0.003399,
    0.003297,
    0.003468,
    0.002764,
    0.002609,
    0.001813,
    0.001866,
    0.001438,
    0.002005,
    0.001986,
    0.002851,
    0.002730,
    0.003332,
    0.002664,
    0.002913,
    0.001902,
    0.002338,
    0.001427,
    0.002515,
    0.001568,
    0.003435,
    0.001280,
    0.005749,
    -0.019465,
    -0.100133,
    -0.124639,
    -0.090480,
    -0.022006,
    0.040717,
    0.073078,
    0.067455,
    0.038524,
    0.005070,
    -0.016523,
    -0.023296,
    -0.019326,
    -0.013168,
    -0.008316,
    -0.004816,
    0.001071,
    0.010108,
    0.020206,
    0.025490,
    0.021958,
    0.009182,
    -0.007361,
    -0.020341,
    -0.023216,
    -0.015000,
    0.000395,
    0.015358,
    0.023516,
    0.021824,
    0.012437,
    0.000350,
    -0.008779,
    -0.011904,
    -0.008850,
    -0.002330,
    0.004377,
    0.008695,
    0.009861,
    0.008419,
    0.005711,
    0.002848,
    0.000537,
    -0.001000,
    -0.001672,
    -0.001354,
    -0.000013,
    0.002137,
    0.004493,
    0.006208,
    0.006535,
    0.005301,
    0.002958,
    0.000506,
    -0.001069,
    -0.001159,
    0.000123,
    0.002192,
    0.004097,
    0.005113,
    0.004941,
    0.003874,
    0.002431,
    0.001253,
    0.000667,
    0.000813,
    0.001427,
    0.002255,
    0.002934,
    0.003365,
    0.003427,
    0.003216,
    0.002755,
    0.002296,
    0.001847,
    0.001655,
    0.001643,
    0.001937,
    0.002324,
    0.002779,
    0.003011,
    0.003081,
    0.002821,
    0.002510,
    0.002100,
    0.001934,
    0.001853,
    0.002099,
    0.002284,
    0.002683,
    0.002449
]


//testExtractFormants(data2, 11000)


export function testExtractFormants(data: number[], samplingFrequency: number)
{
    console.log("testExtractFormants")
    console.log("samplingFrequency", samplingFrequency)
    console.log("data", data)

    const preemphasized = praatPreemphasis(new Float32Array(data), samplingFrequency)
    console.log("preemphasized", preemphasized)

    const window = new Array<number>(preemphasized.length)
        .fill(0)
        .map((_, i) => praatGaussianWindow(i, preemphasized.length))
    console.log("window", window)

    const windowed = preemphasized.map((s, i) => s * window[i])
    console.log("windowed", windowed)

    const lpc = praatBurgMethod(windowed, 10)
    console.log("lpc", lpc)

    const polynomial = praatLpcToPolynomial(lpc)
    console.log("polynomial", polynomial)
    console.log("polynomial", polynomial.map((c, i) => c.toFixed(5) + "*x^" + i).join("+"))

    const roots = findRootsOfPolynomial(polynomial)
    console.log("roots", roots)

    const fixedRoots = roots
        .filter(c => c.imag >= 0)
        .map(c => praatFixRootToUnitCircle(c))
    console.log("fixedRoots", fixedRoots)

    const formants = rootsToFormants(fixedRoots, samplingFrequency)
    console.log("formants", formants.map(f => f.frequency.toFixed(0).padStart(4, " ")).join(", "), "Hz", formants)
}